# Dockerfile.dev - Optimized for local development with Docker Compose

FROM python:3.12-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    && rm -rf /var/lib/apt/lists/*

# Install Poetry globally in the image
ENV POETRY_VERSION=1.8.2
RUN pip install "poetry==$POETRY_VERSION"

# Configure Poetry to install dependencies in the system's python environment,
# as the container itself acts as our virtual environment.
RUN poetry config virtualenvs.create false

# Set the working directory
WORKDIR /app

# Create and switch to a non-root user.
# We do this before copying the code so that the files have the correct owner.
RUN useradd --create-home --shell /bin/bash app \
    && chown -R app:app /app
USER app

# Copy dependency files
COPY --chown=app:app poetry.lock pyproject.toml ./

# Copy the rest of the application code
COPY --chown=app:app . .

# Expose the application port
EXPOSE 8000

# The final command will be overwritten by docker-compose.yml,
# but we leave a default one here to keep the container running.
CMD ["tail", "-f", "/dev/null"]
